{"timestamp": "2025-09-08T18:15:31.180926Z", "action": "load_plan", "status": "ok"}
{"timestamp": "2025-09-08T18:15:31.233971Z", "action": "snapshot_datasets", "status": "ok", "train_source": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/train_set.csv", "train_snapshot": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/train_set.csv", "test_source": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/test_set.csv", "test_snapshot": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/test_set.csv"}
{"timestamp": "2025-09-08T18:15:33.353591Z", "action": "experiment.run", "status": "start"}
{"timestamp": "2025-09-08T18:16:10.223966Z", "action": "experiment.run", "status": "error", "error": "Input X contains NaN.\nGradientBoostingClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values", "traceback": "Traceback (most recent call last):\n  File \"/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/runner/run_experiment.py\", line 235, in run_harness\n    run_output = Experiment().run(\n                 ^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/experiment_scripts/experiment.py\", line 205, in run\n    raise e\n  File \"/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/experiment_scripts/experiment.py\", line 137, in run\n    signature = mlflow.models.infer_signature(sample_input, pipeline.predict(sample_input))\n                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/bank_marketing_term_deposit_prediction/model_pipeline.py\", line 81, in predict\n    predictions = self.model.predict(X_features)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/bank_marketing_term_deposit_prediction/pipeline/model.py\", line 73, in predict\n    return self.model.predict(X)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/ensemble/_gb.py\", line 1627, in predict\n    raw_predictions = self.decision_function(X)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/ensemble/_gb.py\", line 1580, in decision_function\n    X = validate_data(\n        ^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/utils/validation.py\", line 2954, in validate_data\n    out = check_array(X, input_name=\"X\", **check_params)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/utils/validation.py\", line 1105, in check_array\n    _assert_all_finite(\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/Users/avivnahon/Documents/code/ds-agent-world/ds-web-app/backend/.venv/lib/python3.12/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nGradientBoostingClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"}
{"timestamp": "2025-09-08T18:20:01.469993Z", "action": "load_plan", "status": "ok"}
{"timestamp": "2025-09-08T18:20:01.528391Z", "action": "snapshot_datasets", "status": "ok", "train_source": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/train_set.csv", "train_snapshot": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/train_set.csv", "test_source": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/test_set.csv", "test_snapshot": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/data/test_set.csv"}
{"timestamp": "2025-09-08T18:20:03.353691Z", "action": "experiment.run", "status": "start"}
{"timestamp": "2025-09-08T18:20:44.671513Z", "action": "experiment.run", "status": "ok", "metric_name": "roc_auc", "metric_value": 0.9290440690868756}
{"timestamp": "2025-09-08T18:20:44.757399Z", "action": "write_manifest", "status": "ok", "manifest_path": "/Users/avivnahon/ds-agent-projects/session_0f4f0dd5-122d-4338-af13-0f967752758c/experiments/experiment_3/output/general_artifacts/manifest.json"}
